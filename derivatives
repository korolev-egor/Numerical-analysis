print("Нахождение производных таблично-заданной функции по формулам численного дифференцирования")
while True:
    a = float(input("Введите a: "))
    h = float(input("Введите h: "))
    m = int(input("Введите m: "))
    domain = [a + i * h for i in range(m + 1)]
    image = [f32(x) for x in domain]
    # print("Таблица из", m + 1, "значений функции f с шагом", h)
    # [print(element, end=' ') for element in image]
    # print()
    print("{:<20}{:<20}{:<20}{:<20}{:<20}{:<20}".format("x", "f(x)", "f'(x)", "|f'(x)т - f'(x)чд|",
                                                        'f"(x)', '|f"(x)т - f"(x)чд|'))
    der0 = (- 3 * image[0] + 4 * image[1] - image[2]) / (2 * h)
    # print(round(domain[0], 2), '\t', round(image[0], 2), '\t', round(der0, 5), '\t', round(abs(derf32(domain[0])-der0), 6))
    print("{:<20.5f}{:<20.5f}{:<20.5f}{:<20.12f}".format(domain[0], image[0], der0, abs(derf32(domain[0])-der0)))
    for i in range(1, m):
        deri = (image[i+1] - image[i-1]) / (2 * h)
        derderi = (image[i+1] - 2 * image[i] + image[i-1]) / (h ** 2)
        print('{:<20.5f}{:<20.5f}{:<20.5f}{:<20.12f}{:<20.12f}{:<20.12f}'.format(domain[i], image[i], deri,
                                                                               abs(derf32(domain[i])-deri), derderi,
                                                                               abs(derderi-derderf32(domain[i]))))
        # print(round(domain[i], 2), '\t', round(image[i], 2), '\t', round(deri, 5), '\t',
        #       round(abs(derf32(domain[i])-deri), 12), '\t\t\t', round(derderi, 12), '\t', round(abs(derderi-derderf32(domain[i])), 12))
    dern = (3 * image[-1] - 4 * image[-2] + image[-3]) / (2 * h)
    print('{:<20.5f}{:<20.5f}{:<20.5f}{:<20.12f}'.format(domain[-1], image[-1], dern, abs(derf32(domain[-1])-dern)))
    # print(round(domain[-1],2), '\t', round(image[-1], 2), '\t', round(dern, 12), '\t', round(abs(derf32(domain[-1])-dern), 12))
    if input("\nВвести новые значения? (y/n)") == 'n':
        break
